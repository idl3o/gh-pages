name: Deploy Backend Dev to GitHub Pages

on:
  push:
    branches:
      - backend-dev
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: backend-dev

      # Setup Ruby and bundle dependencies
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      # Setup Node.js if needed
      - name: Setup Node.js
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Install Node dependencies if needed
      - name: Install Node dependencies
        if: hashFiles('package.json') != ''
        run: npm ci

      # Build TypeScript SDK if needed
      - name: Build TypeScript SDK
        if: hashFiles('ts/package.json') != ''
        run: |
          cd ts
          npm ci
          npm run build

      # Setup Emscripten for WebAssembly compilation
      - name: Setup Emscripten for WebAssembly
        if: hashFiles('red_x/main.c') != ''
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh

          # Compile RED X
          cd ../red_x
          if [ -f "Makefile" ]; then
            # Verify that both files are present
            if [ -f "main.c" ] && [ -f "font_atlas.c" ] && [ -f "font_atlas.h" ]; then
              echo "Found all required files for compilation"
              cat font_atlas.h | head -n 10  # Display first few lines to verify content
            fi

            # Use the web target specifically for WebAssembly build
            make web
          elif [ -f "main.c" ]; then
            # Use emcc directly with Emscripten's built-in SDL2
            # Compile both main.c and font_atlas.c together
            emcc -Wall -Wextra -s USE_SDL=2 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s 'EXPORTED_RUNTIME_METHODS=["ccall"]' -s 'SDL2_IMAGE_FORMATS=["png"]' main.c font_atlas.c -o index.html -lm
          fi

      # Jekyll build with environment configuration
      - name: Build with Jekyll
        run: |
          # Create temporary config with backend-dev settings
          cat > _config.backend-dev.yml << EOF
          # Environment-specific settings
          environment: backend-dev
          production_url: "https://idl3o.github.io/gh-pages/"
          baseurl: "/gh-pages/backend-dev"
          EOF

          bundle exec jekyll build --config _config.yml,_config.backend-dev.yml
        env:
          JEKYLL_ENV: production

      # Deploy to GitHub Pages
      - name: Deploy to gh-pages-backend-dev branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: _site
          branch: gh-pages-backend-dev
          commit-message: 'Deploy backend-dev site [skip ci]'
          clean: true
