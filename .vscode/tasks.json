{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "make_web",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "& {$emsdkDir = Join-Path -Path '${workspaceFolder}' -ChildPath 'emsdk'; if (Test-Path -Path $emsdkDir) { & \"$emsdkDir\\emsdk_env.bat\" | Out-Null; Push-Location '${workspaceFolder}/red_x'; make web } else { Write-Host 'emsdk not found. Please run the setup_emsdk task first.' -ForegroundColor Red }}"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "make_native",
      "type": "shell",
      "command": "C:\\tools\\msys64\\msys2_shell.cmd",
      "args": [
        "-mingw64",
        "-defterm",
        "-no-start",
        "-here",
        "-c",
        "cd '${workspaceFolder}/red_x'; make"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": "$gcc"
    },
    {
      "label": "start_server",
      "type": "shell",
      "command": "powershell",
      "args": ["-Command", "Set-Location -Path '${workspaceFolder}/red_x'; node server.js"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "clean",
      "type": "shell",
      "command": "powershell",
      "args": ["-Command", "Set-Location -Path '${workspaceFolder}/red_x'; make clean"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "deploy",
      "type": "shell",
      "command": "powershell",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/deploy-gh-pages.ps1"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "generate_contract_docs",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "git checkout temp-check-actions; Clear-Host; Write-Host 'Installing solidity-docgen...' -ForegroundColor Cyan; npm install -g solidity-docgen; Write-Host 'Generating documentation...' -ForegroundColor Green; solidity-docgen --solc-module solc --solc-settings 'optimizer.enabled=true,optimizer.runs=200' --output-dir ./docs/contracts"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "branch_info",
      "type": "shell",
      "command": "${workspaceFolder}/branch-manager.cmd info",
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "switch_to_main",
      "type": "shell",
      "command": "${workspaceFolder}/branch-manager.cmd switch 001",
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "switch_to_docs",
      "type": "shell",
      "command": "${workspaceFolder}/branch-manager.cmd switch temp-check-actions",
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "sync_branches",
      "type": "shell",
      "command": "${workspaceFolder}/branch-manager.cmd sync",
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "make_native_bypass",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "if (!(Test-Path '${workspaceFolder}/red_x/red_x.exe') -and !(Test-Path '${workspaceFolder}/red_x/red_x')) { echo 'Creating placeholder file for red_x' > '${workspaceFolder}/red_x/red_x.placeholder' }"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "setup_emsdk",
      "type": "shell",
      "command": "powershell",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/setup-emsdk.ps1"],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    }
  ]
}
